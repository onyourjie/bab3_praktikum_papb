<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Praktikum BAB 3 - State Management dalam Jetpack Compose&#10;&#10;## Deskripsi Aplikasi&#10;Aplikasi ini mendemonstrasikan implementasi state management dalam Jetpack Compose melalui tiga komponen interaktif:&#10;1. **Counter App** - Aplikasi penghitung dengan tombol plus dan minus&#10;2. **Color Toggle App** - Aplikasi toggle warna merah/hijau&#10;3. **Interactive Profile App** - Aplikasi profil dengan fitur follow/unfollow&#10;&#10;## Implementasi State di Aplikasi&#10;&#10;### 1. Counter App State&#10;```kotlin&#10;var count by remember { mutableStateOf(0) }&#10;```&#10;- Menggunakan `remember { mutableStateOf(0) }` untuk menyimpan nilai counter&#10;- State diperbaharui dengan `count++` dan `count--`&#10;- Implementasi validasi untuk mencegah nilai negatif: `if (count &gt; 0) count--`&#10;- UI secara otomatis ter-recompose ketika nilai `count` berubah&#10;&#10;### 2. Color Toggle State&#10;```kotlin&#10;var isRed by remember { mutableStateOf(true) }&#10;```&#10;- Boolean state untuk menentukan warna (true = merah, false = hijau)&#10;- Toggle dilakukan dengan `isRed = !isRed` pada click listener&#10;- Warna Box dan teks berubah secara reaktif berdasarkan state&#10;&#10;### 3. Profile Follow State&#10;```kotlin&#10;var isFollowed by remember { mutableStateOf(false) }&#10;```&#10;- Boolean state untuk status follow/unfollow&#10;- Mempengaruhi:&#10;  - Teks tombol (&quot;Follow&quot; atau &quot;Unfollow&quot;)&#10;  - Warna tombol&#10;  - Pesan status&#10;  - Jumlah followers (100 atau 101)&#10;&#10;## Konsep State Management yang Diimplementasikan&#10;&#10;### Remember dan MutableState&#10;- `remember` memastikan state bertahan selama recomposition&#10;- `mutableStateOf` membuat state yang dapat diubah dan memicu recomposition&#10;- Delegation property `by` menyederhanakan akses ke value&#10;&#10;### Reactive UI&#10;- Setiap perubahan state otomatis memicu recomposition&#10;- UI selalu sinkron dengan state terkini&#10;- Tidak perlu manual update view seperti pada XML tradisional&#10;&#10;### State Hoisting&#10;- State didefinisikan di level composable yang tepat&#10;- Setiap komponen mengelola state-nya sendiri&#10;- State tidak di-share antar komponen untuk mempertahankan enkapsulasi&#10;&#10;## Analisis: Jetpack Compose vs XML Tradisional&#10;&#10;### Keunggulan Jetpack Compose untuk Kasus Ini:&#10;&#10;#### 1. **Declarative Programming**&#10;- **Compose**: UI dideklarasikan sebagai fungsi dari state&#10;  ```kotlin&#10;  Text(text = count.toString()) // Otomatis update ketika count berubah&#10;  ```&#10;- **XML**: Memerlukan manual update melalui findViewById dan setText&#10;  ```kotlin&#10;  textView.text = count.toString() // Harus dipanggil setiap kali update&#10;  ```&#10;&#10;#### 2. **State Management yang Sederhana**&#10;- **Compose**: State terintegrasi langsung dengan UI&#10;  ```kotlin&#10;  var count by remember { mutableStateOf(0) }&#10;  Button(onClick = { count++ }) // Langsung update UI&#10;  ```&#10;- **XML**: Memerlukan manual binding dan update&#10;  ```kotlin&#10;  private var count = 0&#10;  button.setOnClickListener { &#10;      count++&#10;      updateUI() // Harus manual call update&#10;  }&#10;  ```&#10;&#10;#### 3. **Reactive Updates**&#10;- **Compose**: Automatic recomposition - UI update otomatis ketika state berubah&#10;- **XML**: Manual updates - developer harus eksplisit update setiap view&#10;&#10;#### 4. **Less Boilerplate Code**&#10;- **Compose**: &#10;  - Tidak perlu findViewById&#10;  - Tidak perlu manual listener setup&#10;  - State dan UI logic dalam satu tempat&#10;- **XML**: &#10;  - Memerlukan binding views&#10;  - Setup listeners terpisah&#10;  - Logic tersebar di multiple files&#10;&#10;#### 5. **Type Safety**&#10;- **Compose**: Compile-time checking untuk UI components&#10;- **XML**: Runtime errors untuk referensi view yang salah&#10;&#10;#### 6. **Easier State Synchronization**&#10;- **Compose**: State otomatis tersinkronisasi dengan UI&#10;- **XML**: Mudah terjadi inconsistency antara state dan UI&#10;&#10;### Contoh Perbandingan Konkret:&#10;&#10;**Toggle Warna di Compose:**&#10;```kotlin&#10;var isRed by remember { mutableStateOf(true) }&#10;Box(&#10;    modifier = Modifier&#10;        .background(if (isRed) Color.Red else Color.Green)&#10;        .clickable { isRed = !isRed }&#10;)&#10;```&#10;&#10;**Toggle Warna di XML Tradisional:**&#10;```kotlin&#10;// XML Layout&#10;&lt;View android:id=&quot;@+id/colorBox&quot; /&gt;&#10;&#10;// Activity/Fragment&#10;private var isRed = true&#10;private lateinit var colorBox: View&#10;&#10;override fun onCreate() {&#10;    colorBox = findViewById(R.id.colorBox)&#10;    updateColor()&#10;    colorBox.setOnClickListener {&#10;        isRed = !isRed&#10;        updateColor()&#10;    }&#10;}&#10;&#10;private fun updateColor() {&#10;    colorBox.setBackgroundColor(&#10;        if (isRed) Color.RED else Color.GREEN&#10;    )&#10;}&#10;```&#10;&#10;## Kesimpulan&#10;Jetpack Compose menyederhanakan pengembangan UI Android dengan:&#10;- Mengurangi boilerplate code&#10;- Menyediakan reactive programming model&#10;- Memudahkan state management&#10;- Meningkatkan type safety&#10;- Mempercepat development cycle&#10;&#10;Untuk kasus state management sederhana seperti counter, toggle, dan status follow, Compose memberikan solusi yang jauh lebih elegant dan maintainable dibandingkan pendekatan XML tradisional.&#10;&#10;## Struktur File&#10;```&#10;app/src/main/java/com/example/praktikum_bab3/&#10;├── MainActivity.kt          # File utama berisi semua implementasi&#10;└── res/drawable/&#10;    └── foto.jpeg           # Foto profil&#10;```&#10;&#10;## Fitur yang Diimplementasikan&#10;- ✅ Counter dengan validasi nilai minimum 0&#10;- ✅ Color toggle box 200x200dp (Merah ↔ Hijau)&#10;- ✅ Profile interaktif dengan foto asli&#10;- ✅ Follow/Unfollow dengan status indicator&#10;- ✅ Responsive UI dengan Material Design&#10;- ✅ Scrollable layout untuk menampilkan semua komponen" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/praktikum_bab3/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/praktikum_bab3/MainActivity.kt" />
              <option name="originalContent" value="package com.example.praktikum_bab3&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            MaterialTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    // menampilkan semua aplikasi dalam layout yang dapat di-scroll&#10;                    AllAppsDisplay()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AllAppsDisplay() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Counter App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            CounterAppSection()&#10;        }&#10;&#10;        // Color Toggle App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            ColorToggleAppSection()&#10;        }&#10;&#10;        // Interactive Profile App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            InteractiveProfileAppSection()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CounterAppSection() {&#10;    var count by remember { mutableStateOf(0) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Counter&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = count.toString(),&#10;            fontSize = 72.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    if (count &gt; 0) count--&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFE53935)&#10;                ),&#10;                modifier = Modifier.size(100.dp, 56.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;−&quot;,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Button(&#10;                onClick = { count++ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFF43A047)&#10;                ),&#10;                modifier = Modifier.size(100.dp, 56.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;+&quot;,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (count == 0) {&#10;            Text(&#10;                text = &quot;Nilai tidak bisa kurang dari 0&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ColorToggleAppSection() {&#10;    var isRed by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Klik Kotak untuk Toggle Warna&quot;,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .size(200.dp)&#10;                .background(&#10;                    color = if (isRed) Color.Red else Color.Green,&#10;                    shape = MaterialTheme.shapes.medium&#10;                )&#10;                .clickable { isRed = !isRed },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&#10;                text = if (isRed) &quot;MERAH&quot; else &quot;HIJAU&quot;,&#10;                color = Color.White,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;Warna saat ini: ${if (isRed) &quot;Merah&quot; else &quot;Hijau&quot;}&quot;,&#10;            fontSize = 16.sp,&#10;            color = if (isRed) Color.Red else Color.Green,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InteractiveProfileAppSection() {&#10;    var isFollowed by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Foto Profil dari drawable&#10;        Image(&#10;            painter = painterResource(id = R.drawable.foto),&#10;            contentDescription = &quot;Profile Photo&quot;,&#10;            modifier = Modifier&#10;                .size(120.dp)&#10;                .clip(CircleShape),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Filzah Mufidah&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = &quot;Mahasiswa Teknik Informatika&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;NIM: 235150207111074&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { isFollowed = !isFollowed },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = if (isFollowed) Color.Gray else Color(0xFF6200EA)&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.6f)&#10;                .height(48.dp)&#10;        ) {&#10;            Text(&#10;                text = if (isFollowed) &quot;Unfollow&quot; else &quot;Follow&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .padding(horizontal = 16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isFollowed)&#10;                    Color(0xFFE8F5E9)&#10;                else&#10;                    Color(0xFFFFF3E0)&#10;            )&#10;        ) {&#10;            Text(&#10;                text = if (isFollowed)&#10;                    &quot;✓ Anda mengikuti akun ini&quot;&#10;                else&#10;                    &quot;○ Anda belum mengikuti akun ini&quot;,&#10;                fontSize = 14.sp,&#10;                modifier = Modifier.padding(16.dp),&#10;                color = if (isFollowed) Color(0xFF2E7D32) else Color(0xFFE65100),&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(0.8f),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            StatItem(&quot;Posts&quot;, &quot;42&quot;)&#10;            StatItem(&quot;Followers&quot;, if (isFollowed) &quot;101&quot; else &quot;100&quot;)&#10;            StatItem(&quot;Following&quot;, &quot;89&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StatItem(label: String, value: String) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AllAppsPreview() {&#10;    MaterialTheme {&#10;        AllAppsDisplay()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun CounterPreview() {&#10;    MaterialTheme {&#10;        CounterAppSection()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ColorTogglePreview() {&#10;    MaterialTheme {&#10;        ColorToggleAppSection()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfilePreview() {&#10;    MaterialTheme {&#10;        InteractiveProfileAppSection()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.praktikum_bab3&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            MaterialTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    // menampilkan semua aplikasi dalam layout yang dapat di-scroll&#10;                    AllAppsDisplay()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AllAppsDisplay() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Counter App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            CounterAppSection()&#10;        }&#10;&#10;        // Color Toggle App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            ColorToggleAppSection()&#10;        }&#10;&#10;        // Interactive Profile App Section&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            InteractiveProfileAppSection()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CounterAppSection() {&#10;    var count by remember { mutableStateOf(0) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Counter&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = count.toString(),&#10;            fontSize = 72.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    if (count &gt; 0) count--&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFE53935)&#10;                ),&#10;                modifier = Modifier.size(100.dp, 56.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;−&quot;,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Button(&#10;                onClick = { count++ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFF43A047)&#10;                ),&#10;                modifier = Modifier.size(100.dp, 56.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;+&quot;,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (count == 0) {&#10;            Text(&#10;                text = &quot;Nilai tidak bisa kurang dari 0&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ColorToggleAppSection() {&#10;    var isRed by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Klik Kotak untuk Toggle Warna&quot;,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .size(200.dp)&#10;                .background(&#10;                    color = if (isRed) Color.Red else Color.Green,&#10;                    shape = MaterialTheme.shapes.medium&#10;                )&#10;                .clickable { isRed = !isRed },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&#10;                text = if (isRed) &quot;MERAH&quot; else &quot;HIJAU&quot;,&#10;                color = Color.White,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;Warna saat ini: ${if (isRed) &quot;Merah&quot; else &quot;Hijau&quot;}&quot;,&#10;            fontSize = 16.sp,&#10;            color = if (isRed) Color.Red else Color.Green,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InteractiveProfileAppSection() {&#10;    var isFollowed by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Foto Profil dari drawable&#10;        Image(&#10;            painter = painterResource(id = R.drawable.foto),&#10;            contentDescription = &quot;Profile Photo&quot;,&#10;            modifier = Modifier&#10;                .size(120.dp)&#10;                .clip(CircleShape),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Filzah Mufidah&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = &quot;Mahasiswa Teknik Informatika&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;NIM: 235150207111074&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { isFollowed = !isFollowed },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = if (isFollowed) Color.Gray else Color(0xFF6200EA)&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.6f)&#10;                .height(48.dp)&#10;        ) {&#10;            Text(&#10;                text = if (isFollowed) &quot;Unfollow&quot; else &quot;Follow&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .padding(horizontal = 16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isFollowed)&#10;                    Color(0xFFE8F5E9)&#10;                else&#10;                    Color(0xFFFFF3E0)&#10;            )&#10;        ) {&#10;            Text(&#10;                text = if (isFollowed)&#10;                    &quot;✓ Anda mengikuti akun ini&quot;&#10;                else&#10;                    &quot;○ Anda belum mengikuti akun ini&quot;,&#10;                fontSize = 14.sp,&#10;                modifier = Modifier.padding(16.dp),&#10;                color = if (isFollowed) Color(0xFF2E7D32) else Color(0xFFE65100),&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(0.8f),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            StatItem(&quot;Posts&quot;, &quot;42&quot;)&#10;            StatItem(&quot;Followers&quot;, if (isFollowed) &quot;101&quot; else &quot;100&quot;)&#10;            StatItem(&quot;Following&quot;, &quot;89&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StatItem(label: String, value: String) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AllAppsPreview() {&#10;    MaterialTheme {&#10;        AllAppsDisplay()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun CounterPreview() {&#10;    MaterialTheme {&#10;        CounterAppSection()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ColorTogglePreview() {&#10;    MaterialTheme {&#10;        ColorToggleAppSection()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfilePreview() {&#10;    MaterialTheme {&#10;        InteractiveProfileAppSection()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>